plugins {
    id 'java'
    id 'war'
}

group 'com.example'
version '1.0'

repositories {
    mavenCentral()
}

// -----------------------------
// Task 1: Check if Node.js exists
// -----------------------------
task installNode {
    description = "Ensure Node.js is installed"
    doLast {
        def nodeCheck = execOutput('sh', '-c', 'command -v node >/dev/null 2>&1 && echo found || echo not-found').trim()
        if (nodeCheck == "not-found") {
            throw new GradleException("Node.js is required but not installed.")
        }
    }
}

// -----------------------------
// Task 2: Install npm dependencies
// -----------------------------
task installDeps(type: Exec, dependsOn: installNode) {
    description = "Install frontend dependencies"
    commandLine 'npm', 'install'
    workingDir = file('.')
}

// -----------------------------
// Task 3: Build React/Vite App
// -----------------------------
task buildApp(type: Exec, dependsOn: installDeps) {
    description = "Build production version using Vite"
    commandLine 'npm', 'run', 'build'
    workingDir = file('.')
    inputs.files file('package.json'), file('vite.config.js'), fileTree('src')
    outputs.dir 'dist'
}

// -----------------------------
// Task 4: Copy dist to webapp folder for WAR
// -----------------------------
task copyDistToWebapp(type: Copy, dependsOn: buildApp) {
    description = "Copy built files to WAR source directory"
    from 'dist'
    into "$buildDir/resources/main/webapp"
}

// -----------------------------
// Task 5: Package WAR file
// -----------------------------
war {
    archiveFileName = "expense.war"
    destinationDirectory = file("$buildDir/deploy")
    from "$buildDir/resources/main/webapp"
}

// -----------------------------
// Extend default 'build' task to run everything
// -----------------------------
tasks.build.dependsOn 'buildApp', 'copyDistToWebapp', 'war'

// -----------------------------
// Custom help task
// -----------------------------
task helpTask {
    doLast {
        println """
        ðŸ’¡ Available Tasks:
        --------------------------
        gradle help       -> Show available tasks
        gradle clean      -> Clean build files (built-in)
        gradle build      -> Install â†’ Build â†’ Package WAR
        gradle war        -> Just package WAR
        gradle buildApp   -> Just build frontend
        """
    }
}

// -----------------------------
// Helper method to capture shell output
// -----------------------------
def execOutput(String... args) {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine args
        standardOutput = stdout
    }
    return stdout.toString().trim()
}
